 // -----------------------
// Silvia Takahashi
// UNIVERSIDAD DE LOS ANDES
// Codes and decodes
// Reads a string  of the form dσ:ω
// where   d in {2,3,5}
//  s  in {a,‥,z}
//  W in {a,‥z}*
//   outputs dσ:ω'   ω':  if σ appears in positions p such that p%d = 0 then it is replaced by #
//    symbols that appear in positions such that p%d =1 are replaced by the symbol shifted  d  positions
//      for instance if the symbol is a and d  is 2 then the answer would be c do
//  ω=σ1‥.σn
// ω' =ρ1‥rρ
//   ρi = # if   σi =s and  (i%d) = 0
//   ρi =  shift( σi, d) if  (i%d) = 1
//   ρi =   σi  otherwise



using gold.**
  
         
  
var A
var B

procedure main(args:String[]) begin
	var sc:java.util.Scanner(System.$in)
    
    A = ('a'‥'z')
    B = ('0'‥'9')
    
	coder:=createCoder()
   	deCoder:=createDecoder()

    
    //GAutomataFrame.show(coder)
   //GAutomataFrame.show(deCoder)
   
  	
	
  	Utilities.testCodeDecode(coder,deCoder)
		
end





function createCoder():ITransducer begin
	
	
	Q:= ('a'‥'z')∪ {⟨let,cant,pos⟩ | let in ('a'‥'z'), 0 <= cant <=6,0 <= pos <= 6}  ∪ {"I"} ∪ {"E"}
	
	Σ :=('a'‥'z')
	Σ´:=Σ∪{'$'}∪('0'‥'9')∪{'.'}
	q₀:= "I"
	F:=	 {"I"}

	return 	GDeterministicTransducer(Q,Σ,Σ´,q₀,F,δ,g,h)
end

	
	
	
function δ(state,input) begin
   
   	if state="I" and input in ('a'‥'z')  then return input //Crea el primer estado segun lo que haya leido
   		
 	elseif state in ('a'‥'z')  and input == state then 
 		
 		let = state
 		return ⟨let,1, 1⟩
 		
 	elseif state in ('a'‥'z')  and input != state then 
 		let= state
 		return ⟨let,0,1⟩
 		
 		
 	elseif |state| = 3 and state[1]<=state[2]  then
 		
 		
 		if state[2] == 6 then
 		
 			
			if  input == state[0]  then
	 	
	 			return "I"
	 		
		 	elseif input != state[0] then
		 	
	 			return "I"
	 		end
	
 		else
 			if input == state[0]then
	 		
		 		let,cant,pos:=state[0], state[1], state[2]
		 		return ⟨let,(cant+1),(pos+1)⟩
	 		
		 	elseif input != state[0]then
		 		
		 		let,cant,pos:=state[0], state[1], state[2]
		 		return ⟨let,(cant),(pos+1)⟩

	 		end
	 	end
 	
 	else return "E"
 	end
 	
 	
 	/*
  	elseif state in {2,3,5,"I","E"} then return "E"
 	elseif |state| = 2  and input = ':'   then return ⟨state[0], state[1], 1⟩
  	elseif |state| = 3 and input in ('a'‥'z') then 
  		d,s,pos:=state[0], state[1], state[2]
  		return ⟨d,s,(pos+1)%d⟩
  	else return "E"
   	end*/

end



	
function h(state,input) begin
   
	if state="I" and input in ('a'‥'z')  then 
			
		return input
		
	elseif state in ('a'‥'z')  and input == state then 
 
 		return λ
 		
 	elseif state in ('a'‥'z')  and input != state then 
 		 c :=(1:String)
 		 d :=(input:String)
 
 		return c+input
 		
 		
 	elseif |state| = 3 and state[1]<=state[2]  then
 		
 		if  state[2]==6 then
 			
 			if  input == state[0]  then
 				rCan = state[1]+1
 				can :=(rCan:String)
 	
	 	
	 			return "$"+can
	 		
		 	elseif input != state[0] then
		 		
		 		rpos := state[2]+1
		 		
		 		p :=(rpos:String)
 		 		l :=(input:String)
		 		c :=(state[1]:String)
	 			return p+l+"$"+c
			end
 			
 
 			
 		else
 			if input == state[0]then
	 		
		 		return λ
	 		
		 	elseif input != state[0]then
		 		
		 		rpos := state[2]+1
		 		
		 		p :=(rpos:String)
 		 		l :=(input:String)
		 		
		 	
		 		return p+l

	 		end
	 	end
	 	
	
	 	
	 else
 
 		return λ

 	end








end





function g(s) begin
	return λ
end



function createDecoder():ITransducer begin
	Q:= {⟨d,s,pos⟩ | d in {3,2,5}, s in ('a'‥'z'),pos in (0‥4)∪{"_"}  }  ∪ {3,2,5,"I","E"} 
	Σ´ :=('a'‥'z')∪{ ':', '2', '3', '5'}
	Σ:=Σ´∪{ '#'}
	q₀:= "I"
	F:=	 {⟨d,s,pos⟩ | d in {3,2,5}, s in ('a'‥'z'),0 <= pos < 5  }

	return 	GDeterministicTransducer(Q,Σ,Σ´,q₀,F,δ1,g,h1)
end

	
	
	
function δ1(state,input) begin
  if state="I" and input in { '2', '3', '5'}  then return input - '0'
  elseif state in {2,3,5} and input in ('a'‥'z') then return ⟨state, input,"_"⟩
  else return "E"
  end
end
// ------
function δ1(⟨d,s,pos⟩,input) begin
  if pos="_" and input = ':' then return ⟨d,s,1⟩
  elseif pos="_"  then return "E"
  elseif input = '#' and pos!=0 then return "E"
  elseif input = s and pos =0 then return "E"
  elseif input in ('a'‥'z')∪{'#'} then return ⟨d,s,(pos+1)%d⟩
  else return "E"
  end
end



	
function h1(state,input) begin 
  if state="I" and input in { '2', '3', '5'}  then return input-'0' 
  elseif state in {2,3,5} and input in ('a'‥'z') then return input
  else return λ
  end
end

function h1(⟨d,s,pos⟩,input) begin
 	if pos="_" and input = ':' then return input
    elseif input = '#' and pos=0 then return s
 	elseif input in ('a'‥'z') and pos=1 then return shiftSymbol(input,-d)
 	elseif input in ('a'‥'z')  then return input
   	else return λ
  	end
end






 function shiftSymbol(symbol, shift) begin
	var  r : Character
   
  	if symbol in ('a'‥'z') then
	r:= 'a' + (symbol -'a'+ shift)% 26
	elseif symbol in ('A'‥'Z') then
	r:= 'A' + (symbol -'A'+ shift)% 26
	elseif  symbol in ('0'‥'9') then
	r:= '0' + (symbol -'0'+ shift)% 10
	else r:= r
	end		
	return r
end


